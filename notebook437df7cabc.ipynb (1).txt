{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-08-15T06:48:28.287731Z","iopub.execute_input":"2022-08-15T06:48:28.288297Z","iopub.status.idle":"2022-08-15T06:48:28.335510Z","shell.execute_reply.started":"2022-08-15T06:48:28.288182Z","shell.execute_reply":"2022-08-15T06:48:28.334637Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#loading the dataset\ndata=pd.read_csv('../input/house-rent-prediction-dataset/House_Rent_Dataset.csv')\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.366950Z","iopub.execute_input":"2022-08-15T06:48:28.367655Z","iopub.status.idle":"2022-08-15T06:48:28.424300Z","shell.execute_reply.started":"2022-08-15T06:48:28.367616Z","shell.execute_reply":"2022-08-15T06:48:28.423306Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"#check dataset shape\ndata.shape","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.426060Z","iopub.execute_input":"2022-08-15T06:48:28.426644Z","iopub.status.idle":"2022-08-15T06:48:28.433748Z","shell.execute_reply.started":"2022-08-15T06:48:28.426599Z","shell.execute_reply":"2022-08-15T06:48:28.432286Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Check all the columns in the dataset \ndata.columns","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.435687Z","iopub.execute_input":"2022-08-15T06:48:28.436098Z","iopub.status.idle":"2022-08-15T06:48:28.449998Z","shell.execute_reply.started":"2022-08-15T06:48:28.436063Z","shell.execute_reply":"2022-08-15T06:48:28.448503Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"#information about the dataset \ndata.info()","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.491017Z","iopub.execute_input":"2022-08-15T06:48:28.492438Z","iopub.status.idle":"2022-08-15T06:48:28.519826Z","shell.execute_reply.started":"2022-08-15T06:48:28.492373Z","shell.execute_reply":"2022-08-15T06:48:28.518852Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"data.describe()","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:56:36.595417Z","iopub.execute_input":"2022-08-15T07:56:36.595910Z","iopub.status.idle":"2022-08-15T07:56:36.623366Z","shell.execute_reply.started":"2022-08-15T07:56:36.595873Z","shell.execute_reply":"2022-08-15T07:56:36.622594Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"#Checking for null values \ndata.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.603234Z","iopub.execute_input":"2022-08-15T06:48:28.603940Z","iopub.status.idle":"2022-08-15T06:48:28.616702Z","shell.execute_reply.started":"2022-08-15T06:48:28.603890Z","shell.execute_reply":"2022-08-15T06:48:28.615601Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"#checking for duplicated values\ndata.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:28.636656Z","iopub.execute_input":"2022-08-15T06:48:28.637287Z","iopub.status.idle":"2022-08-15T06:48:28.651593Z","shell.execute_reply.started":"2022-08-15T06:48:28.637251Z","shell.execute_reply":"2022-08-15T06:48:28.650687Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"#converting the categorical data into numeric features\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer \n\n \ntransformed= pd.DataFrame(transformer.fit_transform(data[['Area Type','Area Locality','City','Furnishing Status','Tenant Preferred','Point of Contact']]).toarray())\nencoded_df = data.join(transformed)\nencoded_df.drop(['Posted On','Floor','Area Locality', 'Area Type', 'City', 'Furnishing Status', 'Tenant Preferred', 'Point of Contact'],axis=1, inplace= True)\nencoded_df.head()\nencoded_df.columns.values","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:58:02.489139Z","iopub.execute_input":"2022-08-15T07:58:02.489822Z","iopub.status.idle":"2022-08-15T07:58:02.513156Z","shell.execute_reply.started":"2022-08-15T07:58:02.489784Z","shell.execute_reply":"2022-08-15T07:58:02.512124Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"#identifying the data and target variables \nX= encoded_df.drop('Rent', axis=1)\ny=encoded_df['Rent']\ny.shape","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:30.198366Z","iopub.execute_input":"2022-08-15T06:48:30.199092Z","iopub.status.idle":"2022-08-15T06:48:30.237455Z","shell.execute_reply.started":"2022-08-15T06:48:30.199048Z","shell.execute_reply":"2022-08-15T06:48:30.236458Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"#Splitting the model\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y, test_size=.2, random_state =0)\n","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:30.238920Z","iopub.execute_input":"2022-08-15T06:48:30.239228Z","iopub.status.idle":"2022-08-15T06:48:30.382285Z","shell.execute_reply.started":"2022-08-15T06:48:30.239200Z","shell.execute_reply":"2022-08-15T06:48:30.381219Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"X_test.shape ","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:30.384485Z","iopub.execute_input":"2022-08-15T06:48:30.384933Z","iopub.status.idle":"2022-08-15T06:48:30.391259Z","shell.execute_reply.started":"2022-08-15T06:48:30.384901Z","shell.execute_reply":"2022-08-15T06:48:30.390575Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"#Applying Principal Componemt Analysis for Feature selection\nfrom sklearn.decomposition import PCA \n\npca= PCA(n_components=4)\npca.fit(X_train)\nX_train_transformed= pca.transform(X_train)\nX_train_transformed.shape","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:30.392791Z","iopub.execute_input":"2022-08-15T06:48:30.393124Z","iopub.status.idle":"2022-08-15T06:48:31.778039Z","shell.execute_reply.started":"2022-08-15T06:48:30.393094Z","shell.execute_reply":"2022-08-15T06:48:31.776790Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"pca.fit(X_test)\nX_test_transformed=pca.transform(X_test)\nX_test_transformed.shape ","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:31.779635Z","iopub.execute_input":"2022-08-15T06:48:31.780404Z","iopub.status.idle":"2022-08-15T06:48:32.215129Z","shell.execute_reply.started":"2022-08-15T06:48:31.780360Z","shell.execute_reply":"2022-08-15T06:48:32.213592Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"from sklearn import preprocessing \n\nX_train_transformed= preprocessing.scale(X_train_transformed)","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:34:26.756741Z","iopub.execute_input":"2022-08-15T07:34:26.757548Z","iopub.status.idle":"2022-08-15T07:34:26.765763Z","shell.execute_reply.started":"2022-08-15T07:34:26.757485Z","shell.execute_reply":"2022-08-15T07:34:26.764873Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\n\nlr=LinearRegression()\n\nlr.fit(X_train_transformed, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:34:30.224609Z","iopub.execute_input":"2022-08-15T07:34:30.225083Z","iopub.status.idle":"2022-08-15T07:34:30.238086Z","shell.execute_reply.started":"2022-08-15T07:34:30.225044Z","shell.execute_reply":"2022-08-15T07:34:30.236703Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"y_test ","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:10:52.572948Z","iopub.execute_input":"2022-08-15T07:10:52.573668Z","iopub.status.idle":"2022-08-15T07:10:52.582054Z","shell.execute_reply.started":"2022-08-15T07:10:52.573622Z","shell.execute_reply":"2022-08-15T07:10:52.580887Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"y_pred=lr.predict(X_test_transforme","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:39:48.161338Z","iopub.execute_input":"2022-08-15T07:39:48.162361Z","iopub.status.idle":"2022-08-15T07:39:48.184957Z","shell.execute_reply.started":"2022-08-15T07:39:48.162312Z","shell.execute_reply":"2022-08-15T07:39:48.183628Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"print(lr.score(X_train_transformed, y_test))","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:40:51.489062Z","iopub.execute_input":"2022-08-15T07:40:51.489891Z","iopub.status.idle":"2022-08-15T07:40:51.541287Z","shell.execute_reply.started":"2022-08-15T07:40:51.489832Z","shell.execute_reply":"2022-08-15T07:40:51.539236Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"print (lr.intercept_)\nprint (lr.coef_)","metadata":{"execution":{"iopub.status.busy":"2022-08-15T06:48:58.410206Z","iopub.execute_input":"2022-08-15T06:48:58.410692Z","iopub.status.idle":"2022-08-15T06:48:58.419381Z","shell.execute_reply.started":"2022-08-15T06:48:58.410647Z","shell.execute_reply":"2022-08-15T06:48:58.418257Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error,mean_squared_error\n \nmae = mean_absolute_error(y_true=y_test,y_pred=y_pred)\n#squared True returns MSE value, False returns RMSE value.\nmse = mean_squared_error(y_true=y_test,y_pred=y_pred) #default=True\nrmse = mean_squared_error(y_true=y_test,y_pred=y_pred,squared=False)\n \nprint(\"MAE:\",mae)\nprint(\"MSE:\",mse)\nprint(\"RMSE:\",rmse)","metadata":{"execution":{"iopub.status.busy":"2022-08-15T07:40:02.787595Z","iopub.execute_input":"2022-08-15T07:40:02.788021Z","iopub.status.idle":"2022-08-15T07:40:02.798508Z","shell.execute_reply.started":"2022-08-15T07:40:02.787985Z","shell.execute_reply":"2022-08-15T07:40:02.797087Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}